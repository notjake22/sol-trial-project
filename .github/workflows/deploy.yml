name: Build and Deploy Solana API

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    services:
      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      mongodb:
        image: mongo:7.0
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.1'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB_NAME: Solana
        REDIS_URI: redis://localhost:6379
        RPC_URI: https://api.mainnet-beta.solana.com
      run: go test -v ./...
    
    - name: Run linter
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    name: Build and Push Docker Image
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    name: Deploy to Ubuntu Server
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT || 22 }}
        script: |
          # Create application directory
          mkdir -p ~/solana-api
          cd ~/solana-api
          
          # Pull the latest image
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Stop existing containers
          docker-compose down || true
          
          # Create .env file with secrets
          cat > .env << EOF
          RPC_URI=${{ secrets.RPC_URI }}
          MONGO_URI=mongodb://mongo:27017
          MONGO_DB_NAME=Solana
          REDIS_URI=redis://redis:6379
          PORT=8080
          EOF
          
          # Create docker-compose.yml
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            solana-api:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              ports:
                - "8080:8080"
              environment:
                - PORT=8080
                - MONGO_URI=mongodb://mongo:27017
                - MONGO_DB_NAME=Solana
                - REDIS_URI=redis://redis:6379
                - RPC_URI=${RPC_URI}
              depends_on:
                redis:
                  condition: service_healthy
                mongo:
                  condition: service_healthy
              restart: unless-stopped
              networks:
                - solana-network
          
            redis:
              image: redis:7.2-alpine
              ports:
                - "6379:6379"
              volumes:
                - redis_data:/data
              restart: unless-stopped
              networks:
                - solana-network
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 10s
                timeout: 5s
                retries: 3
                start_period: 5s
              command: redis-server --appendonly yes
          
            mongo:
              image: mongo:7.0
              ports:
                - "27017:27017"
              environment:
                - MONGO_INITDB_DATABASE=Solana
              volumes:
                - mongo_data:/data/db
              restart: unless-stopped
              networks:
                - solana-network
              healthcheck:
                test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
                interval: 10s
                timeout: 5s
                retries: 3
                start_period: 10s
          
          volumes:
            redis_data:
              driver: local
            mongo_data:
              driver: local
          
          networks:
            solana-network:
              driver: bridge
          EOF
          
          # Start the application
          docker-compose up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 30
          
          # Check service health
          docker-compose ps
          
          # Test API endpoint
          curl -f http://localhost:8080/health || echo "Health check endpoint not available"
          
          # Clean up old images
          docker image prune -f

  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    name: Post-Deploy Health Check
    
    steps:
    - name: Wait for deployment
      run: sleep 60
    
    - name: Check service health
      run: |
        # Add health check logic here
        # curl -f http://${{ secrets.HOST }}:8080/health
        echo "Health check would be performed here"